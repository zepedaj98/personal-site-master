# -*- coding: utf-8 -*-
"""weather.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1injbIvhMCuZRxiTH8hLE9foQZ0MSvfmN
"""
def print_weather(weather_data):
    #Print weather data for today
    print(weather_data["date"],' | ',data["time"][6:])
    print(weather_data["region"])
    print(weather_data["temp_now"])
    print(weather_data["summary"])
    print(weather_data["wind"])
    print(weather_data["UV"])
    print(weather_data["humidity"])
    print(weather_data["precipitation"])
    print("Sunrise Time: ", weather_data["sunrise"])
    print("Sunset Time: ", weather_data["sunset"])
    #print weather data for 10day forecast
    for dayweather in weather_data["next_days"]:
        print("="*40, dayweather["name"], "="*40)
        print("High:", dayweather["max_temp"], "F")
        print("Low:", dayweather["min_temp"], "F")
        print(dayweather["weather"])
        print(dayweather["rain_chance"])

from bs4 import BeautifulSoup as bs 
import requests
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib
matplotlib.use('Agg')
import time
from flask import Flask, url_for, render_template

USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36"
# US english
LANGUAGE = "en-US,en;q=0.5"

app = Flask(__name__, static_folder='static')
@app.route('/')

def weather():
    def get_weather_data(url):
        session = requests.Session()
        session.headers['User-Agent'] = USER_AGENT
        session.headers['Accept-Language'] = LANGUAGE
        session.headers['Content-Language'] = LANGUAGE
        html = session.get(url)

        # create a new soup
        soup = bs(html.text, "html.parser")
        
        # store all results on this dictionary
        result = {}

        # extract region
        result['region'] = soup.find("span", attrs={"data-testid": "PresentationName"}).text
        # extract date
        result['date'] = soup.find("span", attrs={"class": "DailyContent--daypartDate--3VGlz"}).text
        #extract sunrise time 
        result['sunrise'] = soup.find("span", attrs={"data-testid": "SunriseTime"}).text
        #extract sunset time 
        result['sunset'] = soup.find("span", attrs={"data-testid": "SunsetTime"}).text
        # extract temperature now
        result['temp_now'] = soup.find("span", attrs={"class": "DailyContent--temp--1s3a7","data-testid": "TemperatureValue"}).text
        # get the day and hour now
        result['time'] = soup.find("div", attrs={"class": "DailyForecast--timestamp--22Azh"}).text
        # get the precipitation
        result['precipitation'] = soup.find("span", attrs={"data-testid":"precip", "data-testid": "PercentageValue"}).text
        # get the % of humidity
        result['humidity'] = soup.find("span", attrs={"class":"DetailsTable--value--2YD0-","data-testid": "PercentageValue"}).text
        # get the % of humidity
        result['UV'] = soup.find("span", attrs={"data-testid": "UVIndexValue"}).text
        # extract the wind
        result['wind'] = soup.find("span", attrs={"data-testid": "Wind"}).text
        # extract weather summary
        result['summary'] = soup.find("p", attrs={"data-testid": "wxPhrase"}).text

        next_days = []
        days = soup.find("div", attrs={"class": "DailyForecast--DisclosureList--nosQS"})
        for day in days.findAll("details", attrs={"data-track-string": "detailsExpand"}):
            # extract the name of the day
            day_name = day.findAll("h3")[0].text.strip()
            # get weather status for that day
            weather = day.find("span", {"class": "DetailsSummary--extendedData--307Ax"}).text.strip()
            # find min and max temps for 10day forecastboth, both in fahrenheit
            max_temp = day.find("span", {"class": "DetailsSummary--highTempValue--3PjlX"}).text.strip()
            min_temp = day.find("span", {"class": "DetailsSummary--lowTempValue--2tesQ"}).text.strip()
            # find chance of rain
            rain_chance = day.find("span", {"data-testid": "PercentageValue"}).text.strip()
            next_days.append({"name": day_name, "max_temp": max_temp, "min_temp": min_temp, "weather": weather, "rain_chance": rain_chance})
        # append to result
        result['next_days'] = next_days
        return result 
    def display_weather(data):
        #create empty lists to store the data for the forecast for plotting
        names = []
        weathers = []
        max_temps = []
        min_temps = []
        rain_chances = []
        for day in data['next_days'][:-1]:
            names.append(day['name'])
            weathers.append(day['weather'])
            max_temps.append(day['max_temp'][:-1])
            min_temps.append(day['min_temp'][:-1])
            rain_chances.append(day['rain_chance'])
        max_temp_integers = []
        min_temp_integers = []
        for maxTemp, minTemp in zip(max_temps, min_temps):
            int_max_temp = int(maxTemp)
            int_min_temp = int(minTemp)
            max_temp_integers.append(int_max_temp)
            min_temp_integers.append(int_min_temp)
        
        #set up plot for temperature forecast for the next 10 days
        fig, ax = plt.subplots(figsize=(10,5))
        ax.plot(names, max_temp_integers, label='Highs', color='red')
        ax.plot(names, min_temp_integers, label='Lows', color='blue')
        ax.set_xlabel('Day')
        ax.set_ylabel('Temperautes (degrees F)')
        plt.title('Forecast PLot')
        ax.legend()
        
        #save image to file
        fig.savefig('static/forecast.png')

        return 0

    URL = "https://weather.com/weather/tenday/l/1a5e73f128fd8e76d7a098b97c839bc14958ea402d3ab0a210e4f8e0b1d14dec"
    #scrape 10day weather forecast from weather.com and store it in data
    data = get_weather_data(URL)
    html = display_weather(data)
    return render_template('forecast.html', data=data)

if __name__ == "__main__":
    app.run(debug=True)